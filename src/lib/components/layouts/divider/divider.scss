@use "../../../../framework/abstracts/transitions";

@use "../../../../framework/mixins/colors";
@use "../../../../framework/mixins/fonts";
@use "../../../../framework/mixins/intrinsics";
@use "../../../../framework/mixins/palettes";
@use "../../../../framework/mixins/radius";

@if not env("DISABLE_COMPONENTS_LAYOUTS_DIVIDER") {
    .divider {
        @include palettes.var-inherit();

        display: flex;

        @include colors.text($namespace: "divider", $face: "foreground", $shade: "light");
        @include colors.opacity($namespace: "divider");

        pointer-events: none;
        user-select: none;

        @include transitions.build();

        &[data-palette] {
            @include colors.text($namespace: "divider", $face: "background", $shade: "bolder");
        }

        &:not([data-orientation]) {
            @include intrinsics.margin-y($namespace: "divider", $unit: rem);

            width: 100%;
        }

        &[data-orientation="vertical"] {
            @include intrinsics.margin-x($namespace: "divider", $unit: rem);

            height: 100%;
        }
    }

    hr.divider {
        border: none;
        background: currentColor;

        @include radius.all($namespace: "divider", $unit: rem);

        &:not([data-orientation]) {
            @include intrinsics.size-height($namespace: "divider");
        }

        &[data-orientation="vertical"] {
            @include intrinsics.size-width($namespace: "divider");
        }
    }

    span.divider {
        align-items: center;
        justify-content: center;

        @include intrinsics.gap-all($namespace: "divider.text", $unit: rem);

        @include fonts.size($namespace: "divider.text", $unit: rem);
        @include fonts.weight($namespace: "divider.text");
        @include fonts.letter-spacing($namespace: "divider.text", $unit: em);

        text-align: center;
        white-space: nowrap;

        &::before,
        &::after {
            display: block;
            flex-grow: 1;

            background: currentColor;
            @include radius.all($namespace: "divider", $unit: rem);

            content: "";
        }

        &:not([data-orientation]) {
            &::before,
            &::after {
                @include intrinsics.size-height($namespace: "divider");
            }
        }

        &[data-orientation="vertical"] {
            writing-mode: vertical-rl;

            &::before,
            &::after {
                @include intrinsics.size-width($namespace: "divider");
            }
        }
    }
}
