@use "../abstracts/variables";

@use "../mixins/borders";
@use "../mixins/backgrounds";
@use "../mixins/fonts";
@use "../mixins/intrinsics";
@use "../mixins/radius";
@use "../mixins/sizings";
@use "../mixins/transforms";
@use "../mixins/transitions";
@use "../mixins/transparency";

@mixin base(
    $namespace,
    $alignment-x: center,
    $alignment-y: center,
    $support-loud: false,
    $support-radius: false,
    $support-outline: false
) {
    display: inline-flex;
    align-items: #{$alignment-y};
    justify-content: #{$alignment-x};

    position: relative;

    @include intrinsics.gap-all($namespace: $namespace, $unit: em);
    @include intrinsics.padding-all($namespace: $namespace, $unit: em);

    outline: none !important; // TODO: Remove during accessibility pass

    @include fonts.size($unit: rem, $sizing-tier: "inline");
    @include fonts.weight($namespace);

    text-decoration: none !important;

    cursor: pointer;
    user-select: none;

    vertical-align: middle;
    white-space: nowrap;

    @include backgrounds.transitions();
    @include transparency.transitions();
    @include fonts.transitions();

    @if ($support-loud) {
        @include transforms.transitions();
    }

    @if ($support-outline) {
        border-color: transparent;
        @include borders.style-all($namespace: $namespace);
        @include borders.width-all($namespace: $namespace);

        @include borders.transitions();
    }

    @if $support-radius {
        @include radius.all($unit: "rem");
    } @else {
        @include radius.all($namespace: $namespace, $unit: "rem");
    }

    @include transitions.build();
}

@mixin base-disabled($namespace) {
    cursor: not-allowed;
    @include transparency.opacity($namespace: "#{$namespace}.disabled");
}

@mixin state-active($is-inverse: false) {
    @if $is-inverse {
        &:not(:active, [aria-current], [aria-pressed="true"]) {
            @content;
        }
    } @else {
        &:is(:active, [aria-current], [aria-pressed="true"]) {
            @content;
        }
    }
}

@mixin state-disabled($is-inverse: false) {
    @if $is-inverse {
        &:not(:disabled, [aria-disabled="true"]) {
            @content;
        }
    } @else {
        &:is(:disabled, [aria-disabled="true"]) {
            @content;
        }
    }
}

@mixin state-focus($is-inverse: false) {
    @if $is-inverse {
        &:not(:focus, :hover) {
            @content;
        }
    } @else {
        &:is(:focus, :hover) {
            @content;
        }
    }
}

@mixin variation-loud-base($namespace) {
    transform: scale(1);
}

@mixin variation-loud-active($namespace) {
    @include transforms.scale("#{$namespace}.active");
}

@mixin variation-block-base($namespace, $is-inverse: false) {
    @include backgrounds.color(
        $namespace: $namespace,
        $face: if($is-inverse, "foreground", "background"),
        $shade: "bolder"
    );
    @include fonts.color(
        $namespace: $namespace,
        $face: if($is-inverse, "background", "foreground"),
        $shade: "normal"
    );
}

@mixin variation-block-active($namespace, $is-inverse: false) {
    @include backgrounds.color(
        $namespace: "#{$namespace}.active",
        $face: if($is-inverse, "foreground", "background"),
        $shade: "lightest"
    );
    @include fonts.color(
        $namespace: "#{$namespace}.active",
        $face: if($is-inverse, "background", "foreground"),
        $shade: "normal"
    );
}

@mixin variation-block-focus($namespace, $is-inverse: false) {
    @include backgrounds.color(
        $namespace: "#{$namespace}.focus",
        $face: if($is-inverse, "foreground", "background"),
        $shade: "normal"
    );
    @include fonts.color(
        $namespace: "#{$namespace}.focus",
        $face: if($is-inverse, "background", "foreground"),
        $shade: "normal"
    );
}

@mixin variation-clear-base($namespace, $is-inverse: false) {
    @include backgrounds.color(
        $namespace: $namespace,
        $face: if($is-inverse, "foreground", "background"),
        $shade: "lightest"
    );
    @include fonts.color(
        $namespace: $namespace,
        $face: if($is-inverse, "foreground", "background"),
        $shade: "normal"
    );
}

@mixin variation-clear-active($namespace, $is-inverse: false) {
    @include backgrounds.color(
        $namespace: "#{$namespace}.active",
        $face: if($is-inverse, "foreground", "background"),
        $shade: "lightest"
    );
    @include fonts.color(
        $namespace: "#{$namespace}.active",
        $face: if($is-inverse, "background", "foreground"),
        $shade: "normal"
    );
}

@mixin variation-clear-focus($namespace, $is-inverse: false) {
    @include backgrounds.color(
        $namespace: "#{$namespace}.focus",
        $face: if($is-inverse, "foreground", "background"),
        $shade: "lightest"
    );
    @include fonts.color(
        $namespace: "#{$namespace}.focus",
        $face: if($is-inverse, "foreground", "background"),
        $shade: "normal"
    );
}

@mixin variation-outline-base($namespace, $is-inverse: false) {
    @include borders.color-all(
        $namespace: $namespace,
        $face: if($is-inverse, "foreground", "background"),
        $shade: "lightest"
    );
    @include backgrounds.color(
        $namespace: $namespace,
        $face: if($is-inverse, "foreground", "background"),
        $shade: "lightest"
    );
    @include fonts.color(
        $namespace: $namespace,
        $face: if($is-inverse, "foreground", "background"),
        $shade: "normal"
    );
}

@mixin variation-outline-active($namespace, $is-inverse: false) {
    @include borders.color-all(
        $namespace: "#{$namespace}.active",
        $face: if($is-inverse, "foreground", "background"),
        $shade: "lightest"
    );
    @include backgrounds.color(
        $namespace: "#{$namespace}.active",
        $face: if($is-inverse, "foreground", "background"),
        $shade: "lightest"
    );
    @include fonts.color(
        $namespace: "#{$namespace}.active",
        $face: if($is-inverse, "background", "foreground"),
        $shade: "normal"
    );
}

@mixin variation-outline-focus($namespace, $is-inverse: false) {
    @include borders.color-all(
        $namespace: "#{$namespace}.focus",
        $face: if($is-inverse, "foreground", "background"),
        $shade: "lightest"
    );
    @include backgrounds.color(
        $namespace: "#{$namespace}.focus",
        $face: if($is-inverse, "foreground", "background"),
        $shade: "lightest"
    );
    @include fonts.color(
        $namespace: "#{$namespace}.focus",
        $face: if($is-inverse, "foreground", "background"),
        $shade: "normal"
    );
}
