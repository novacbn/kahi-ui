@use "../../../../framework/abstracts/transitions";

@use "../../../../framework/appearances/anchor";

@use "../../../../framework/mixins/colors";
@use "../../../../framework/mixins/fonts";
@use "../../../../framework/mixins/intrinsics";
@use "../../../../framework/mixins/radius";

@if not env("DISABLE_COMPONENTS_DISPLAY_BADGE") {
    .badge {
        @include radius.var-reset($namespace: "badge");

        display: inline-flex;

        align-items: center;
        justify-content: center;

        @include intrinsics.gap-all($namespace: "badge", $unit: em);
        @include intrinsics.padding-all($namespace: "badge", $unit: em);

        @include radius.all($unit: em);

        @include colors.background($namespace: "badge", $face: "foreground", $shade: "lightest");
        @include colors.text($namespace: "badge", $face: "background", $shade: "normal");
        text-shadow: 0px 0px 0px currentColor;

        @include fonts.size($namespace: "badge", $unit: em);
        @include fonts.weight($namespace: "badge");

        @include transitions.build();

        &[data-palette] {
            @include colors.background(
                $namespace: "badge",
                $face: "background",
                $shade: "lightest"
            );
            @include colors.text($namespace: "badge", $face: "foreground", $shade: "normal");
        }
    }

    :is(a, button).badge {
        cursor: pointer;

        user-select: none;

        @include anchor.state-focus() {
            text-decoration: underline;
        }
    }
}
