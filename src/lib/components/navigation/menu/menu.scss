@use "../../../../framework/appearances/button";
@use "../../../../framework/appearances/flex";

@use "../../../../framework/mixins/colors";
@use "../../../../framework/mixins/fonts";
@use "../../../../framework/mixins/intrinsics";
@use "../../../../framework/mixins/radius";
@use "../../../../framework/mixins/palettes";
@use "../../../../framework/mixins/sizings";

/*
.menu {
    & ul {
        @apply flex items-stretch ml-0;

        flex-direction: var(--orientation-direction);

        & > li {
            @apply flex flex-col min-w-max;

            & > ul {
                @apply mt-[var(--spacing-y)] px-[var(--spacing-local-small)];
            }

            & + li {
                margin: var(--orientation-spacing);
            }

            & > :is(hr, span[role="separator"]) {
                @apply m-0;
            }

            & > span[role="separator"]::before {
                @apply max-w-[1ch];
            }
        }
    }
}
*/

@if not env("DISABLE_COMPONENTS_NAVIGATION_MENU") {
    .menu {
        @include palettes.var-inherit();
        @include sizings.var-reset-font($tier: "inline", $namespace: "menu");

        @include flex.var-reset($direction: column, $namespace: "menu");

        @include flex.base($unit: em);
        @include fonts.size($unit: rem, $sizing-tier: "inline");
    }

    .menu--divider {
        user-select: none;
    }

    .menu--heading {
        @include colors.opacity($namespace: "menu.heading");

        @include fonts.letter-spacing($namespace: "menu.heading", $unit: em);
        @include fonts.size($namespace: "menu.heading", $unit: em);
        @include fonts.weight($namespace: "menu.heading");

        user-select: none;
    }

    .menu--item {
        @include button.base($namespace: "menu.item", $alignment-x: left, $alignment-y: center);

        @include button.variation-clear-base($namespace: "menu.item", $is-inverse: true);

        .menu[data-palette] &,
        &[data-palette] {
            @include button.variation-clear-base($namespace: "menu.item");
        }

        @include button.state-disabled() {
            @include button.base-disabled($namespace: "menu.item.disabled");
        }

        @include button.state-disabled($is-inverse: true) {
            @include button.state-hover() {
                @include button.variation-clear-hover(
                    $namespace: "menu.item.hover",
                    $is-inverse: true
                );

                .menu[data-palette] &,
                &[data-palette] {
                    @include button.variation-clear-hover($namespace: "menu.item.hover");
                }
            }

            @include button.state-active() {
                @include button.variation-clear-active(
                    $namespace: "menu.item.active",
                    $is-inverse: true
                );

                .menu[data-palette] &,
                &[data-palette] {
                    @include button.variation-clear-active($namespace: "menu.item.active");
                }
            }
        }
    }

    .menu--section {
        display: flex;
        flex-direction: inherit;

        align-items: inherit;
        justify-content: inherit;

        gap: inherit;

        @include intrinsics.padding-left($namespace: "menu.section", $unit: em);
    }
}
