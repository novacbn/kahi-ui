.popover {
    --spacing-x: 0px;
    --spacing-y: 0px;

    display: inline-block;
    position: relative;

    white-space: nowrap;
}

.popover > section {
    position: absolute;

    z-index: 1;

    &:is(:not([data-placement]), [data-placement="bottom"]) {
        &:is(:not([data-alignment-x]), [data-alignment-x="center"]) {
            inset: auto 50% calc(var(--spacing-y) * -1) auto;
            transform: translate(50%, 100%);
        }

        &[data-alignment-x="left"] {
            inset: auto 0% calc(var(--spacing-y) * -1) auto;
            transform: translate(0%, 100%);
        }

        &[data-alignment-x="right"] {
            inset: auto 100% calc(var(--spacing-y) * -1) auto;
            transform: translate(100%, 100%);
        }
    }

    &[data-placement="top"] {
        &:is(:not([data-alignment-x]), [data-alignment-x="center"]) {
            inset: calc(var(--spacing-y) * -1) 50% auto auto;
            transform: translate(50%, -100%);
        }

        &[data-alignment-x="left"] {
            inset: calc(var(--spacing-y) * -1) 0% auto auto;
            transform: translate(0%, -100%);
        }

        &[data-alignment-x="right"] {
            inset: calc(var(--spacing-y) * -1) 100% auto auto;
            transform: translate(100%, -100%);
        }
    }

    &[data-placement="left"] {
        &:is(:not([data-alignment-y]), [data-alignment-y="center"]) {
            inset: 50% auto auto calc(var(--spacing-x) * -1);
            transform: translate(-100%, -50%);
        }

        &[data-alignment-y="top"] {
            inset: 100% auto auto calc(var(--spacing-x) * -1);
            transform: translate(-100%, -100%);
        }

        &[data-alignment-y="bottom"] {
            inset: 0% auto auto calc(var(--spacing-x) * -1);
            transform: translate(-100%, 0%);
        }
    }

    &[data-placement="right"] {
        &:is(:not([data-alignment-y]), [data-alignment-y="center"]) {
            inset: 50% calc(var(--spacing-x) * -1) auto auto;
            transform: translate(100%, -50%);
        }

        &[data-alignment-y="top"] {
            inset: 100% calc(var(--spacing-x) * -1) auto auto;
            transform: translate(100%, -100%);
        }

        &[data-alignment-y="bottom"] {
            inset: 0% calc(var(--spacing-x) * -1) auto auto;
            transform: translate(100%, 0%);
        }
    }

    &.transition > * {
        /**
         * HACK: Using a `visibility` CSS property animation to create a hacky way of
         * skipping the first animation on first load
         */
        animation: visibility-hack 0.000001s forwards paused;
    }
}

input[type="checkbox"][role="presentation"] {
    &:not(:checked) + .popover {
        & > .transition {
            /**
             * HACK: We're abusing `Transition` Component's internal state CSS vars to
             * make `Overlay` transitions SSR-able
             */
            --animation: var(--animation-exit);
        }
    }

    &:checked + .popover {
        & > section > * {
            animation-play-state: running;
        }

        & > .transition {
            /**
             * HACK: We're abusing `Transition` Component's internal state CSS vars to
             * make`Overlay` transitions SSR-able
             */
            --animation: var(--animation-enter);
        }
    }
}
