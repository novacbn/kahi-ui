@use "sass:color";

@use "./constants";
@use "./colors";
@use "./strings";

@function generate-color-palette(
    $dark-base,
    $light-base,
    $foreground,
    $dark-shading,
    $light-shading
) {
    // TODO: Update to automatically detect `foreground` via contrast
    $palette-dark: get("dark.base");
    $palette-light: get("light.base");

    @return (
        "base": $dark-base,
        "foreground": $foreground,
        "palettes": (
            "dark": (
                "lightest": colors.shade($dark-base, $palette-dark, $dark-shading, 5),
                "lighter": colors.shade($dark-base, $palette-dark, $dark-shading, 4),
                "light": colors.shade($dark-base, $palette-dark, $dark-shading, 3),
                "normal": colors.shade($dark-base, $palette-dark, $dark-shading, 2),
                "bold": colors.shade($dark-base, $palette-dark, $dark-shading, 1),
                "bolder": $dark-base,
                "boldest": colors.shade($dark-base, $palette-light, $light-shading, 1),
            ),
            "light": (
                "lightest": colors.shade($light-base, $palette-light, $light-shading, 5),
                "lighter": colors.shade($light-base, $palette-light, $light-shading, 4),
                "light": colors.shade($light-base, $palette-light, $light-shading, 3),
                "normal": colors.shade($light-base, $palette-light, $light-shading, 2),
                "bold": colors.shade($light-base, $palette-light, $light-shading, 1),
                "bolder": $light-base,
                "boldest": colors.shade($light-base, $palette-dark, $dark-shading, 1),
            ),
        )
    );
}

@function generate-darklight-palette(
    $dark-base,
    $dark-dark-shading,
    $dark-light-shading,
    $light-base,
    $light-dark-shading,
    $light-light-shading
) {
    // NOTE: The `dark` and `light` palettes need to be special-cased due to co-dependency

    @return (
        "palettes": (
            "dark": (
                "base": $dark-base,
                "foreground": "light",
                "palettes": (
                    "dark": (
                        "lightest": $dark-base,
                        "lighter": colors.shade($dark-base, $light-base, $dark-dark-shading, 1),
                        "light": colors.shade($dark-base, $light-base, $dark-dark-shading, 2),
                        "normal": colors.shade($dark-base, $light-base, $dark-dark-shading, 3),
                        "bold": colors.shade($dark-base, $light-base, $dark-dark-shading, 4),
                        "bolder": colors.shade($dark-base, $light-base, $dark-dark-shading, 5),
                        "boldest": colors.shade($dark-base, $light-base, $dark-dark-shading, 6),
                    ),
                    "light": (
                        "lightest": colors.shade($dark-base, $light-base, $dark-light-shading, 6),
                        "lighter": colors.shade($dark-base, $light-base, $dark-light-shading, 5),
                        "light": colors.shade($dark-base, $light-base, $dark-light-shading, 4),
                        "normal": colors.shade($dark-base, $light-base, $dark-light-shading, 3),
                        "bold": colors.shade($dark-base, $light-base, $dark-light-shading, 2),
                        "bolder": colors.shade($dark-base, $light-base, $dark-light-shading, 1),
                        "boldest": $dark-base,
                    ),
                ),
            ),
            "light": (
                "base": $light-base,
                "foreground": "dark",
                "palettes": (
                    "dark": (
                        "lightest": colors.shade($light-base, $dark-base, $light-dark-shading, 6),
                        "lighter": colors.shade($light-base, $dark-base, $light-dark-shading, 5),
                        "light": colors.shade($light-base, $dark-base, $light-dark-shading, 4),
                        "normal": colors.shade($light-base, $dark-base, $light-dark-shading, 3),
                        "bold": colors.shade($light-base, $dark-base, $light-dark-shading, 2),
                        "bolder": colors.shade($light-base, $dark-base, $light-dark-shading, 1),
                        "boldest": $light-base,
                    ),
                    "light": (
                        "lightest": $light-base,
                        "lighter": colors.shade($light-base, $dark-base, $light-light-shading, 1),
                        "light": colors.shade($light-base, $dark-base, $light-light-shading, 2),
                        "normal": colors.shade($light-base, $dark-base, $light-light-shading, 3),
                        "bold": colors.shade($light-base, $dark-base, $light-light-shading, 4),
                        "bolder": colors.shade($light-base, $dark-base, $light-light-shading, 5),
                        "boldest": colors.shade($light-base, $dark-base, $light-light-shading, 6),
                    ),
                ),
            ),
        )
    );
}

@mixin each() {
    @include constants.each("palettes.*.base") using ($name, $base) {
        $foreground: get("#{$name}.foreground");

        @content ($name, $foreground);
    }
}

@function get($name) {
    @return constants.get("palettes.#{$name}");
}

@function has($name) {
    @return constants.has("palettes.#{$name}.base");
}

@function format-reference($name, $face, $shade) {
    // TODO: validate `$face`
    // TODO: validate `$shade`

    @if not has($name) and $name != "auto" {
        @error "bad argument #1 to 'palettes.format-reference' (invalid name '#{$name}')";
    }

    @return strings.format-identifier("palettes.#{$name}.#{$face}.#{$shade}");
}

@function format-var($name, $face, $shade, $fallback: null) {
    $name: format-reference($name, $face, $shade);

    @if $fallback {
        @return var(#{$name}, #{$fallback});
    }

    @return var(--#{$name});
}
