@use "../../../../framework/abstracts/variables";

@use "../../../../framework/mixins/backgrounds";
@use "../../../../framework/mixins/fonts";
@use "../../../../framework/mixins/intrinsics";
@use "../../../../framework/mixins/palettes";
@use "../../../../framework/mixins/transitions";
@use "../../../../framework/mixins/transparency";

@if not env("DISABLE_COMPONENTS_DISCLOSURE_ACCORDION") {
    .accordion {
        @include palettes.var-palette($palette: "auto", $is-inverse: true);

        display: flex;
        flex-direction: column;
    }

    .accordion--item {
        display: flex;
        align-items: center;

        position: relative;

        @include intrinsics.gap-all($namespace: "accordion.item", $unit: em);
        @include intrinsics.padding-all($namespace: "tab.item", $unit: rem);

        color: currentColor;
        cursor: pointer;

        user-select: none;

        @include fonts.transitions();
        @include transparency.transitions();

        @include transitions.build();

        &[aria-disabled="true"] {
            pointer-events: none;
            @include transparency.opacity($namespace: "accordion.item.disabled");
        }

        &::before {
            display: block;
            position: absolute;

            content: "";

            top: 0;
            left: 0;

            width: 100%;
            height: #{variables.format-var("accordion.item.border.width")};

            background: currentColor;
            @include transparency.opacity($namespace: "accordion.item.border");

            @include backgrounds.transitions();

            @include transitions.build();
        }

        &:not([aria-disabled]):is(:focus, :hover) {
            @include fonts.color(
                $namespace: "accordion.item.focus",
                $face: "background",
                $shade: "bolder"
            );

            &::before {
                background: currentColor;
                opacity: 1;
            }
        }

        & > :is(:first-child, :last-child) {
            margin-left: auto;
        }
    }

    .accordion--state:checked + .accordion--item:not([aria-disabled]),
    .accordion--item:not([aria-disabled]):is(:active, [aria-pressed="true"]) {
        @include fonts.color(
            $namespace: "accordion.item.active",
            $face: "background",
            $shade: "bolder"
        );

        &::before {
            background: currentColor;
            opacity: 1;
        }
    }

    .accordion--section {
        display: block;
    }

    .accordion--state {
        display: none;

        &:not(:checked) + .accordion--item {
            & > :last-child {
                display: none;
            }

            & + .accordion--section {
                display: none;
            }
        }

        &:checked + .accordion--item {
            & > :first-child {
                display: none;
            }
        }
    }
}
