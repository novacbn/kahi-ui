@use "../abstracts/palettes";
@use "../abstracts/variables";

@use "../appearances/surface";

@use "../mixins/backgrounds";
@use "../mixins/fonts";
@use "../mixins/transitions";

:root {
    // HACK: Would use `palettes.var-palette()`, but then there would
    // be an import naming conflict

    --palette-background-lightest: var(--palettes-auto-background-lightest);
    --palette-background-lighter: var(--palettes-auto-background-lighter);
    --palette-background-light: var(--palettes-auto-background-light);
    --palette-background-normal: var(--palettes-auto-background-normal);
    --palette-background-bold: var(--palettes-auto-background-bold);
    --palette-background-bolder: var(--palettes-auto-background-bolder);
    --palette-background-boldest: var(--palettes-auto-background-boldest);

    --palette-foreground-lightest: var(--palettes-auto-foreground-lightest);
    --palette-foreground-lighter: var(--palettes-auto-foreground-lighter);
    --palette-foreground-light: var(--palettes-auto-foreground-light);
    --palette-foreground-normal: var(--palettes-auto-foreground-normal);
    --palette-foreground-bold: var(--palettes-auto-foreground-bold);
    --palette-foreground-bolder: var(--palettes-auto-foreground-bolder);
    --palette-foreground-boldest: var(--palettes-auto-foreground-boldest);

    // NOTE: The base document background color diverges from
    // "surface" convention so the dark / light palettes stand
    // out more when used else where as backgrounds

    @include backgrounds.color($namespace: "document", $face: "background", $shade: "light");
    @include surface.text($namespace: "document");

    @include fonts.family($namespace: "document");
    @include fonts.line-height($namespace: "document");
    @include fonts.size($namespace: "document");

    @include transitions.build();
}

::selection {
    @include surface.background($namespace: "document", $is-inverse: true);
    @include surface.text($namespace: "document", $is-inverse: true);
}

* {
    // TODO: Remove after adding ARIA / Accessibility support

    -webkit-tap-highlight-color: transparent;

    scrollbar-width: #{variables.format-var("document.scrollbar.standard.size")};
    scrollbar-color: hsla(
            #{palettes.format-var($name: "dark", $face: "background", $shade: "lightest")},
            #{variables.format-var("document.scrollbar.thumb.background.opacity")}
        )
        hsla(
            #{palettes.format-var($name: "auto", $face: "background", $shade: "boldest")},
            #{variables.format-var("document.scrollbar.track.background.opacity")}
        );

    @include transitions.push(scrollbar-color, "visual");
    @include transitions.build();
}

::-webkit-scrollbar {
    width: calc(
        #{variables.format-var("document.scrollbar.webkit.size")} + (#{variables.format-var(
                        "document.scrollbar.track.padding"
                    )} * 1rem)
    );
    height: calc(
        #{variables.format-var("document.scrollbar.webkit.size")} + (#{variables.format-var(
                        "document.scrollbar.track.padding"
                    )} * 1rem)
    );
}
::-webkit-scrollbar-track,
::-webkit-scrollbar-thumb {
    border: calc(variables.format-var("document.scrollbar.track.padding") * 1rem) solid
        rgba(255, 255, 255, 0);

    @include backgrounds.transitions();
    @include transitions.build();
}

::-webkit-scrollbar-track {
    background-color: hsla(
        #{palettes.format-var($name: "dark", $face: "background", $shade: "lightest")},
        #{variables.format-var("document.scrollbar.track.background.opacity")}
    );
}

::-webkit-scrollbar-thumb {
    background-clip: padding-box;

    background-color: hsla(
        #{palettes.format-var($name: "auto", $face: "background", $shade: "boldest")},
        #{variables.format-var("document.scrollbar.thumb.background.opacity")}
    );
}
