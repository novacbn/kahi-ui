@use "../../../../framework/abstracts/transitions";

@use "../../../../framework/mixins/alignments";
@use "../../../../framework/mixins/borders";
@use "../../../../framework/mixins/colors";
@use "../../../../framework/mixins/fonts";
@use "../../../../framework/mixins/intrinsics";
@use "../../../../framework/mixins/palettes";
@use "../../../../framework/mixins/radius";
@use "../../../../framework/mixins/sizings";
@use "../../../../framework/mixins/transforms";

@if not env("DISABLE_COMPONENTS_TYPOGRAPHY_TEXT") {
    .text {
        @include alignments.var-reset-text();
        @include transforms.var-reset-text();

        color: currentColor;

        @include alignments.text();
        @include transforms.text();

        @include fonts.line-height($support-sizing: true);
        @include fonts.size($sizing-tier: "inline", $unit: rem);

        @include colors.transitions-text();
        @include colors.transitions-opacity();

        @include transitions.build();

        &[data-palette] {
            @include colors.text($namespace: "text", $face: "background", $shade: "boldest");
        }

        &[data-variation~="block"] {
            @include fonts.size($sizing-tier: "block", $unit: rem);
        }

        &[data-variation~="truncate"] {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
    }

    small.text {
        @include fonts.size($namespace: "text.small", $unit: em);
        @include colors.opacity($namespace: "text.small");
    }
}
