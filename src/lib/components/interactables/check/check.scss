@use "../../../../framework/abstracts/transitions";

@use "../../../../framework/appearances/toggle";

@use "../../../../framework/mixins/palettes";
@use "../../../../framework/mixins/sizings";
@use "../../../../framework/mixins/radius";
@use "../../../../framework/mixins/transforms";

@if not env("DISABLE_COMPONENTS_INTERACTABLES_CHECK") {
    .check {
        @include palettes.var-palette($palette: "neutral");
        @include sizings.var-reset-font($tier: "inline", $namespace: "check");

        @include toggle.base($namespace: "check");
        @include radius.all($namespace: "check", $unit: rem);

        @include toggle.state-disabled() {
            @include toggle.base-disabled($namespace: "check");
        }

        @include toggle.state-active() {
            @include toggle.variation-loud-active($namespace: "check");
        }

        &::before {
            @include toggle.pseudo-base();

            border-radius: 12.5%;

            transform: scale(0);

            @include transforms.transitions();

            @include transitions.build();
        }

        @include toggle.pseudo-state-active() {
            &::before {
                transform: scale(1);
            }
        }

        &:is(:not([data-variation]), [data-variation~="block"]) {
            @include toggle.state-checked($is-inverse: true) {
                @include toggle.variation-block-base($namespace: "check.block");

                @include toggle.state-focus() {
                    @include toggle.variation-block-focus($namespace: "check.block");
                }

                @include toggle.state-active() {
                    @include toggle.variation-block-active($namespace: "check.block");
                }
            }

            @include toggle.state-checked() {
                @include toggle.variation-block-base($namespace: "check.block", $is-checked: true);

                @include toggle.state-focus() {
                    @include toggle.variation-block-focus(
                        $namespace: "check.block",
                        $is-checked: true
                    );
                }

                @include toggle.state-active() {
                    @include toggle.variation-block-active(
                        $namespace: "check.block",
                        $is-checked: true
                    );
                }
            }
        }

        &[data-variation~="flush"] {
            @include toggle.state-checked($is-inverse: true) {
                @include toggle.variation-flush-base($namespace: "check.flush");

                @include toggle.state-focus() {
                    @include toggle.variation-flush-focus($namespace: "check.flush");
                }

                @include toggle.state-active() {
                    @include toggle.variation-flush-active($namespace: "check.flush");
                }
            }

            @include toggle.state-checked() {
                @include toggle.variation-flush-base($namespace: "check.flush", $is-checked: true);

                @include toggle.state-focus() {
                    @include toggle.variation-flush-focus(
                        $namespace: "check.flush",
                        $is-checked: true
                    );
                }

                @include toggle.state-active() {
                    @include toggle.variation-flush-active(
                        $namespace: "check.flush",
                        $is-checked: true
                    );
                }
            }
        }
    }
}
