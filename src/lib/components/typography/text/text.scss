@use "../../../../framework/mixins/alignments";
@use "../../../../framework/mixins/borders";
@use "../../../../framework/mixins/backgrounds";
@use "../../../../framework/mixins/fonts";
@use "../../../../framework/mixins/intrinsics";
@use "../../../../framework/mixins/palettes";
@use "../../../../framework/mixins/radius";
@use "../../../../framework/mixins/sizings";
@use "../../../../framework/mixins/transforms";
@use "../../../../framework/mixins/transitions";
@use "../../../../framework/mixins/transparency";

@if not env("DISABLE_COMPONENTS_TYPOGRAPHY_TEXT") {
    .text,
    .article > p {
        @include alignments.var-reset-text();
        @include sizings.var-reset-font($tier: "inline");
        @include transforms.var-reset-text();

        color: currentColor;

        @include alignments.text();
        @include transforms.text();

        @include fonts.line-height($support-sizing: true);
        @include fonts.size($tier: "inline", $unit: rem);

        @include fonts.transitions();
        @include transparency.transitions();

        @include transitions.build();

        &[data-palette] {
            @include fonts.color($namespace: "text", $face: "background", $shade: "boldest");
        }

        &[data-variation~="block"] {
            @include fonts.size($tier: "block", $unit: rem);
        }

        &[data-variation~="truncate"] {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
    }

    small.text,
    .article > :is(small, p > small) {
        @include fonts.size($namespace: "text.small", $unit: em);
        @include transparency.opacity($namespace: "text.small");
    }

    .article > p:not(:last-child) {
        @include intrinsics.margin-bottom($namespace: "text.article", $unit: em);
    }
}
