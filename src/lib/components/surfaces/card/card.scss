@use "../../../../framework/abstracts/transitions";

@use "../../../../framework/appearances/stack";
@use "../../../../framework/appearances/surfaces";

@use "../../../../framework/mixins/borders";
@use "../../../../framework/mixins/colors";
@use "../../../../framework/mixins/elevations";
@use "../../../../framework/mixins/intrinsics";
@use "../../../../framework/mixins/palettes";
@use "../../../../framework/mixins/sizings";
@use "../../../../framework/mixins/radius";
@use "../../../../framework/mixins/text";

@if not env("DISABLE_COMPONENTS_SURFACES_CARD") {
    .card {
        @include elevations.var-reset($namespace: "card");
        @include palettes.var-auto-background();
        @include radius.var-reset($namespace: "card");
        @include sizings.var-reset-font($tier: "inline");

        display: flex;
        flex-direction: column;

        @include surfaces.radius-all();

        @include sizings.font($tier: "inline", $unit: rem);

        @include borders.transitions();
        @include colors.transitions-background();
        @include colors.transitions-text();

        @include transitions.build();

        &:not([data-variation~="flush"]) {
            @include surfaces.background($namespace: "card");
            @include surfaces.borders-all($namespace: "card");
            @include surfaces.text($namespace: "card");

            @include elevations.shadow();

            & > :is(.card--footer, .card--header, .card--section) {
                @include intrinsics.margin-x(
                    $namespace: "card",
                    $unit: rem,
                    $sizing-tier: "inline"
                );

                &:first-child {
                    @include intrinsics.margin-top(
                        $namespace: "card",
                        $unit: rem,
                        $sizing-tier: "inline"
                    );
                }

                &:last-child {
                    @include intrinsics.margin-bottom(
                        $namespace: "card",
                        $unit: rem,
                        $sizing-tier: "inline"
                    );
                }
            }
        }
    }

    .card--figure {
        display: flex;

        align-items: center;
        justify-content: center;
    }

    .card--footer {
        @include stack.var-reset(
            $namespace: "card.footer",
            $direction: row,
            $alignment-x: flex-end,
            $alignment-y: center
        );

        @include stack.base($unit: rem);

        &:not(:first-child) {
            @include intrinsics.margin-top(
                $namespace: "card.footer",
                $unit: rem,
                $sizing-tier: "inline"
            );
        }
    }

    .card--header {
        display: flex;
        align-items: center;

        @include intrinsics.gap-all($namespace: "card.header", $unit: em);

        @include text.size($namespace: "card.header", $unit: em);
        @include text.weight($namespace: "card.header");

        &:not(:first-child) {
            @include intrinsics.margin-top(
                $namespace: "card.header",
                $unit: rem,
                $sizing-tier: "inline"
            );
        }
    }

    .card--section {
        &:last-of-type {
            flex-grow: 1;
        }

        &:not(:first-child) {
            @include intrinsics.margin-top(
                $namespace: "card.section",
                $unit: rem,
                $sizing-tier: "inline"
            );
        }
    }
}
