@mixin define-color($namespace, $hue, $saturation, $lightness, $step) {
    #{$namespace}-huesat: $hue, #{$saturation};

    @include define-step(#{$namespace}-lightness, $lightness, $step);
}

@mixin derive-palette($namespace, $color, $dull, $muted, $translucent) {
    #{$namespace}-base: #{vcolor($color, 1)};
    #{$namespace}-dull: #{vcolor($color, $dull)};
    #{$namespace}-muted: #{vcolor($color, $muted)};
    #{$namespace}-translucent: #{vcolor($color, $translucent)};
}

@mixin derive-step($namespace, $step, $tiny, $small, $medium, $large, $huge) {
    #{$namespace}-tiny: #{step($step, $tiny)};
    #{$namespace}-small: #{step($step, $small)};
    #{$namespace}-medium: #{step($step, $medium)};
    #{$namespace}-large: #{step($step, $large)};
    #{$namespace}-huge: #{step($step, $huge)};
}

@mixin derive-mscale($namespace, $scale, $tiny, $small, $medium, $large, $huge) {
    #{$namespace}-tiny: #{mscale($scale, $tiny)};
    #{$namespace}-small: #{mscale($scale, $small)};
    #{$namespace}-medium: #{mscale($scale, $medium)};
    #{$namespace}-large: #{mscale($scale, $large)};
    #{$namespace}-huge: #{mscale($scale, $huge)};
}

@mixin define-mscale($namespace, $base, $ratio) {
    #{$namespace}-base: expand-value($base);
    #{$namespace}-ratio: expand-value($ratio);
}

@mixin define-step($namespace, $base, $step) {
    #{$namespace}-base: expand-value($base);
    #{$namespace}-step: expand-value($step);
}

@mixin define-viewport($namespace, $map) {
    --viewports-#{$namespace}-max: #{map-get($map, "max-width")};
    --viewports-#{$namespace}-min: #{map-get($map, "min-width")};
}

@mixin use-linkable($namespace) {
    color: inherit;
    opacity: var(#{$namespace}-opacity-visible);

    cursor: pointer;
    text-decoration: none;

    user-select: none;
    transition: opacity var(#{$namespace}-transition);

    &:hover,
    &:focus {
        opacity: var(#{$namespace}-opacity-dull);
    }

    &:active {
        opacity: var(#{$namespace}-opacity-muted);
    }
}

@mixin use-palette($namespace, $has-selection: false, $is-inherited: false) {
    @if ($is-inherited) {
        --background: var(inherit, var(#{$namespace}-default-background));
        --color: var(inherit, var(#{$namespace}-default-color));
    } @else {
        --background: var(#{$namespace}-default-background);
        --color: var(#{$namespace}-default-color);
    }

    @each $palette in accent, dark, light, alert, affirmative, negative {
        &[data-palette="#{$palette}"] {
            --background: var(#{$namespace}-#{$palette}-background);
            --color: var(#{$namespace}-#{$palette}-color);
        }
    }

    @if ($has-selection) {
        &::selection {
            background-color: vhsl(--background);
            color: vhsl(--color);
        }
    }
}

@mixin use-palette-single($namespace, $is-inherited: false) {
    @if ($is-inherited) {
        --background: var(inherit, var(#{$namespace}-default));
    } @else {
        --background: var(#{$namespace}-default);
    }

    @each $palette in accent, dark, light, alert, affirmative, negative {
        &[data-palette="#{$palette}"] {
            --background: var(#{$namespace}-#{$palette});
        }
    }
}

@mixin use-animation-palette($is-inverted: false) {
    @if ($is-inverted) {
        --animation-background: var(--color);
        --animation-color: var(--background);
    } @else {
        --animation-background: var(--background);
        --animation-color: var(--color);
    }
}
