@mixin use-alignment-attribute($alignment, $value, $axis: false, $viewport: false) {
    @if ($viewport) {
        @include use-media-viewport($viewport) {
            @if ($axis) {
                &[data-alignment-#{$axis}~="#{$alignment}+#{$viewport}"] {
                    --alignment-#{$axis}: #{$value};
                }
            } @else {
                &[data-alignment~="#{$alignment}+#{$viewport}"] {
                    --alignment-x: #{$value};
                    --alignment-y: #{$value};
                }
            }
        }
    } @else {
        @if ($axis) {
            &[data-alignment-#{$axis}~="#{$alignment}"] {
                --alignment-#{$axis}: #{$value};
            }
        } @else {
            &[data-alignment~="#{$alignment}"] {
                --alignment-x: #{$value};
                --alignment-y: #{$value};
            }
        }
    }
}

@mixin use-alignment(
    $alignments,
    $alignments-x,
    $alignments-y,
    $viewport: false,
    $default-x: baseline,
    $default-y: flex-start
) {
    --alignment-x: #{$default-x};
    --alignment-y: #{$default-y};

    @if ($viewport) {
        @each $viewport, $index in $viewports-keys {
            @each $alignment, $value in $alignments {
                @include use-alignment-attribute($alignment, $value, false, $viewport);
            }

            @each $alignment, $value in $alignments-x {
                @include use-alignment-attribute($alignment, $value, x, $viewport);
            }

            @each $alignment, $value in $alignments-y {
                @include use-alignment-attribute($alignment, $value, y, $viewport);
            }
        }
    }

    @each $alignment, $value in $alignments {
        @include use-alignment-attribute($alignment, $value);
    }

    @each $alignment, $value in $alignments-x {
        @include use-alignment-attribute($alignment, $value, x);
    }

    @each $alignment, $value in $alignments-y {
        @include use-alignment-attribute($alignment, $value, y);
    }
}

@mixin use-alignment-flex($viewport: false, $default-x: baseline, $default-y: flex-start) {
    @include use-alignment(
        (
            center: center,
        ),
        (
            baseline: baseline,
            center: center,
            stretch: stretch,
            left: flex-start,
            right: flex-end,
        ),
        (
            baseline: baseline,
            center: center,
            stretch: stretch,
            top: flex-start,
            bottom: flex-end,
        ),
        $viewport,
        $default-x,
        $default-y
    );
}

@mixin use-alignment-grid($viewport: false, $default-x: baseline, $default-y: start) {
    @include use-alignment(
        (
            center: center,
        ),
        (
            baseline: baseline,
            center: center,
            stretch: stretch,
            left: start,
            right: end,
        ),
        (
            baseline: baseline,
            center: center,
            stretch: stretch,
            top: start,
            bottom: end,
        ),
        $viewport,
        $default-x,
        $default-y
    );
}

/**
 * HACK: Ideally we would just want to check for a blank attribute, e.g. `<div data-hidden>`, however
 * CSS doesn't support a selector that can accomplish that
 */

/**
 * HACK: SASS can /probably/ not accompish formatting a list of values in a nice way, so
 / manually referencing the Viewports here
 */

@mixin use-boolean-global($attribute, $viewport: false) {
    @if ($viewport) {
        @each $viewport, $index in $viewports-keys {
            @include use-media-viewport($viewport) {
                [#{$attribute}~="#{$viewport}"] {
                    @content;
                }
            }
        }

        [#{$attribute}]:not([#{$attribute}~="tiny"], [#{$attribute}~="small"], [#{$attribute}~="medium"], [#{$attribute}~="large"]) {
            @content;
        }
    } @else {
        [#{$attribute}] {
            @content;
        }
    }
}

@mixin use-boolean-children($attribute, $viewport: false) {
    @if ($viewport) {
        @each $viewport, $index in $viewports-keys {
            @include use-media-viewport($viewport) {
                & > [#{$attribute}~="#{$viewport}"] {
                    @content;
                }
            }
        }

        &
            > [#{$attribute}]:not([#{$attribute}~="tiny"], [#{$attribute}~="small"], [#{$attribute}~="medium"], [#{$attribute}~="large"]) {
            @content;
        }
    } @else {
        & > [#{$attribute}] {
            @content;
        }
    }
}

@mixin use-grid-points-attribute($point, $viewport: false) {
    @if ($viewport) {
        @include use-media-viewport($viewport) {
            &[data-points~="#{$point}+#{$viewport}"] {
                --points: #{$point} !important;
            }
        }
    } @else {
        &[data-points~="#{$point}"] {
            --points: #{$point};
        }
    }
}

@mixin use-grid-points($viewport: false, $default: unset, $minimum: 1, $maximum: 12) {
    --points: #{$default};

    @if ($viewport) {
        @each $viewport, $index in $viewports-keys {
            @for $point from $minimum to $maximum {
                @include use-grid-points-attribute($point, $viewport);
            }
        }
    }

    @for $point from $minimum to $maximum {
        @include use-grid-points-attribute($point);
    }
}

@mixin use-spacing-attribute($namespace, $spacing, $viewport: false) {
    @if ($viewport) {
        @include use-media-viewport($viewport) {
            &[data-spacing~="#{$spacing}+#{$viewport}"] {
                --spacing: var(#{$namespace}-#{$spacing}) !important;
            }
        }
    } @else {
        &[data-spacing~="#{$spacing}"] {
            --spacing: var(#{$namespace}-#{$spacing});
        }
    }
}

@mixin use-spacing(
    $namespace,
    $viewport: false,
    $default: unset,
    $spacings: (tiny, small, medium, large, huge)
) {
    --spacing: #{$default};

    @if ($viewport) {
        @each $viewport, $index in $viewports-keys {
            @each $spacing, $index in $spacings {
                @include use-spacing-attribute($namespace, $spacing, $viewport);
            }
        }
    }

    @each $spacing, $index in $spacings {
        @include use-spacing-attribute($namespace, $spacing);
    }
}

@mixin use-sizing-attribute($namespace, $sizing, $viewport: false) {
    @if ($viewport) {
        @include use-media-viewport($viewport) {
            &[data-sizing~="#{$sizing}+#{$viewport}"] {
                --sizing: var(#{$namespace}-#{$sizing}) !important;
            }
        }
    } @else {
        &[data-sizing~="#{$sizing}"] {
            --sizing: var(#{$namespace}-#{$sizing});
        }
    }
}

@mixin use-sizing(
    $namespace,
    $viewport: false,
    $default: initial,
    $sizings: (tiny, small, medium, large, huge)
) {
    --sizing: #{$default};

    @if ($viewport) {
        @each $viewport, $index in $viewports-keys {
            @each $sizing, $index in $sizings {
                @include use-sizing-attribute($namespace, $sizing, $viewport);
            }
        }
    }

    @each $sizing, $index in $sizings {
        @include use-sizing-attribute($namespace, $sizing);
    }
}

@mixin use-viewport-attribute($namespace, $viewport, $media: false) {
    @if ($media) {
        @include use-media-viewport($media) {
            &[data-viewport~="#{$viewport}+#{$media}"] {
                --viewport: var(#{$namespace}-#{$viewport}) !important;
            }
        }
    } @else {
        &[data-viewport~="#{$viewport}"] {
            --viewport: var(#{$namespace}-#{$viewport});
        }
    }
}

@mixin use-viewport($namespace, $constrain: false, $default: initial, $viewports: $viewports-keys) {
    --viewport: #{$default};

    @if ($constrain) {
        @each $media, $index in $viewports-keys {
            @each $viewport, $index in $viewports {
                @include use-viewport-attribute($namespace, $viewport, $media);
            }
        }
    }

    @each $viewport, $index in $viewports {
        @include use-viewport-attribute($namespace, $viewport);
    }
}
