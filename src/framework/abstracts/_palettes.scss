@use "sass:color";
@use "sass:map";

@use "./colors";
@use "./constants";
@use "./strings";

@function generate-color-palette($dark, $light) {
    $palette-dark: get("dark.dark.base");
    $palette-light: get("light.light.base");

    $dark-base: map.get($dark, "base");
    $dark-stepping: map.get($dark, "stepping");

    $light-base: map.get($light, "base");
    $light-stepping: map.get($light, "stepping");

    @return (
        "dark": (
            "base": $dark-base,
            "foreground": select-foreground($dark-base),
            "lightest": color.mix($palette-dark, $dark-base, $dark-stepping * 5),
            "lighter": color.mix($palette-dark, $dark-base, $dark-stepping * 4),
            "light": color.mix($palette-dark, $dark-base, $dark-stepping * 3),
            "normal": color.mix($palette-dark, $dark-base, $dark-stepping * 2),
            "bold": color.mix($palette-dark, $dark-base, $dark-stepping * 1),
            "bolder": $dark-base,
            "boldest": color.mix($palette-light, $dark-base, $light-stepping * 1),
        ),
        "light": (
            "base": $light-base,
            "foreground": select-foreground($light-base),
            "lightest": color.mix($palette-light, $light-base, $light-stepping * 5),
            "lighter": color.mix($palette-light, $light-base, $light-stepping * 4),
            "light": color.mix($palette-light, $light-base, $light-stepping * 3),
            "normal": color.mix($palette-light, $light-base, $light-stepping * 2),
            "bold": color.mix($palette-light, $light-base, $light-stepping * 1),
            "bolder": $light-base,
            "boldest": color.mix($palette-dark, $light-base, $dark-stepping * 1),
        )
    );
}

@function generate-darklight-palette($dark, $light) {
    // NOTE: The `dark` and `light` palettes need to be special-cased due to co-dependency

    $dark-base: map.get($dark, "base");
    $dark-dark-stepping: map.get($dark, "dark.stepping");
    $dark-light-stepping: map.get($dark, "light.stepping");

    $light-base: map.get($light, "base");
    $light-dark-stepping: map.get($light, "dark.stepping");
    $light-light-stepping: map.get($light, "light.stepping");

    @return (
        "palettes": (
            "dark": (
                "dark": (
                    "base": $dark-base,
                    "foreground": "light",
                    "lightest": $dark-base,
                    "lighter": color.mix($light-base, $dark-base, $dark-dark-stepping * 1),
                    "light": color.mix($light-base, $dark-base, $dark-dark-stepping * 2),
                    "normal": color.mix($light-base, $dark-base, $dark-dark-stepping * 3),
                    "bold": color.mix($light-base, $dark-base, $dark-dark-stepping * 4),
                    "bolder": color.mix($light-base, $dark-base, $dark-dark-stepping * 5),
                    "boldest": color.mix($light-base, $dark-base, $dark-dark-stepping * 6),
                ),
                "light": (
                    "base": $dark-base,
                    "foreground": "light",
                    "lightest": color.mix($light-base, $dark-base, $dark-light-stepping * 6),
                    "lighter": color.mix($light-base, $dark-base, $dark-light-stepping * 5),
                    "light": color.mix($light-base, $dark-base, $dark-light-stepping * 4),
                    "normal": color.mix($light-base, $dark-base, $dark-light-stepping * 3),
                    "bold": color.mix($light-base, $dark-base, $dark-light-stepping * 2),
                    "bolder": color.mix($light-base, $dark-base, $dark-light-stepping * 1),
                    "boldest": $dark-base,
                ),
            ),
            "light": (
                "dark": (
                    "base": $light-base,
                    "foreground": "dark",
                    "lightest": color.mix($dark-base, $light-base, $light-dark-stepping * 6),
                    "lighter": color.mix($dark-base, $light-base, $light-dark-stepping * 5),
                    "light": color.mix($dark-base, $light-base, $light-dark-stepping * 4),
                    "normal": color.mix($dark-base, $light-base, $light-dark-stepping * 3),
                    "bold": color.mix($dark-base, $light-base, $light-dark-stepping * 2),
                    "bolder": color.mix($dark-base, $light-base, $light-dark-stepping * 1),
                    "boldest": $light-base,
                ),
                "light": (
                    "base": $light-base,
                    "foreground": "dark",
                    "lightest": $light-base,
                    "lighter": color.mix($dark-base, $light-base, $light-light-stepping * 1),
                    "light": color.mix($dark-base, $light-base, $light-light-stepping * 2),
                    "normal": color.mix($dark-base, $light-base, $light-light-stepping * 3),
                    "bold": color.mix($dark-base, $light-base, $light-light-stepping * 4),
                    "bolder": color.mix($dark-base, $light-base, $light-light-stepping * 5),
                    "boldest": color.mix($dark-base, $light-base, $light-light-stepping * 6),
                ),
            ),
        )
    );
}

@mixin each() {
    @include constants.each("palettes.*.dark.base") using ($name, $base) {
        $dark-foreground: get("#{$name}.dark.foreground");
        $light-foreground: get("#{$name}.light.foreground");

        @content ($name, $dark-foreground, $light-foreground);
    }
}

@function get($name) {
    @return constants.get("palettes.#{$name}");
}

@function has($name) {
    @return constants.has("palettes.#{$name}.dark.base");
}

@function format-reference($name, $face, $shade) {
    // TODO: validate `$face`
    // TODO: validate `$shade`

    @if not has($name) and $name != "auto" {
        @error "bad argument #1 to 'palettes.format-reference' (invalid name '#{$name}')";
    }

    @return strings.format-identifier("palettes.#{$name}.#{$face}.#{$shade}");
}

@function format-var($name, $face, $shade, $fallback: null) {
    $name: format-reference($name, $face, $shade);

    @if $fallback {
        @return var(#{$name}, #{$fallback});
    }

    @return var(--#{$name});
}

@function select-foreground($base) {
    $base-dark: get("dark.dark.base");
    $base-light: get("light.light.base");

    $contrast-dark: colors.contrast($base, $base-dark);
    $contrast-light: colors.contrast($base, $base-light);

    @return if($contrast-dark > $contrast-light, "dark", "light");
}
