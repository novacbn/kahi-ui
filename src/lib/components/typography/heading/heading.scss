@use "../../../../framework/mixins/alignments";
@use "../../../../framework/mixins/fonts";
@use "../../../../framework/mixins/intrinsics";
@use "../../../../framework/mixins/transforms";
@use "../../../../framework/mixins/transitions";

@if not env("DISABLE_COMPONENTS_TYPOGRAPHY_HEADING") {
    .heading,
    :where(.article) > :is(h1, h2, h3, h4, h5, h6) {
        @include alignments.var-reset-text();
        @include transforms.var-reset-text();

        color: currentColor;
        @include fonts.family($namespace: "heading");

        @include alignments.text();
        @include transforms.text();

        @include fonts.transitions();

        @include transitions.build();

        &[data-palette] {
            @include fonts.color($namespace: "text", $face: "background", $shade: "boldest");
        }

        &[data-variation~="truncate"] {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
    }

    h1.heading,
    :where(.article) > h1 {
        @include fonts.line-height($namespace: "heading.inline.h1");
        @include fonts.size($namespace: "heading.inline.h1", $unit: rem);
        @include fonts.weight($namespace: "heading.inline.h1");

        &[data-variation~="block"] {
            @include fonts.line-height($namespace: "heading.block.h1");
            @include fonts.size($namespace: "heading.block.h1", $unit: rem);
            @include fonts.weight($namespace: "heading.block.h1");
        }
    }

    h2.heading,
    :where(.article) > h2 {
        @include fonts.line-height($namespace: "heading.inline.h2");
        @include fonts.size($namespace: "heading.inline.h2", $unit: rem);
        @include fonts.weight($namespace: "heading.inline.h2");

        &[data-variation~="block"] {
            @include fonts.line-height($namespace: "heading.block.h2");
            @include fonts.size($namespace: "heading.block.h2", $unit: rem);
            @include fonts.weight($namespace: "heading.block.h2");
        }
    }

    h3.heading,
    :where(.article) > h3 {
        @include fonts.line-height($namespace: "heading.inline.h3");
        @include fonts.size($namespace: "heading.inline.h3", $unit: rem);
        @include fonts.weight($namespace: "heading.inline.h3");

        &[data-variation~="block"] {
            @include fonts.line-height($namespace: "heading.block.h3");
            @include fonts.size($namespace: "heading.block.h3", $unit: rem);
            @include fonts.weight($namespace: "heading.block.h3");
        }
    }

    h4.heading,
    :where(.article) > h4 {
        @include fonts.line-height($namespace: "heading.inline.h4");
        @include fonts.size($namespace: "heading.inline.h4", $unit: rem);
        @include fonts.weight($namespace: "heading.inline.h4");

        &[data-variation~="block"] {
            @include fonts.line-height($namespace: "heading.block.h4");
            @include fonts.size($namespace: "heading.block.h4", $unit: rem);
            @include fonts.weight($namespace: "heading.block.h4");
        }
    }

    h5.heading,
    :where(.article) > h5 {
        @include fonts.line-height($namespace: "heading.inline.h5");
        @include fonts.size($namespace: "heading.inline.h5", $unit: rem);
        @include fonts.weight($namespace: "heading.inline.h5");

        &[data-variation~="block"] {
            @include fonts.line-height($namespace: "heading.block.h5");
            @include fonts.size($namespace: "heading.block.h5", $unit: rem);
            @include fonts.weight($namespace: "heading.block.h5");
        }
    }

    h6.heading,
    :where(.article) > h6 {
        @include fonts.line-height($namespace: "heading.inline.h6");
        @include fonts.size($namespace: "heading.inline.h6", $unit: rem);
        @include fonts.weight($namespace: "heading.inline.h6");

        &[data-variation~="block"] {
            @include fonts.line-height($namespace: "heading.block.h6");
            @include fonts.size($namespace: "heading.block.h6", $unit: rem);
            @include fonts.weight($namespace: "heading.block.h6");
        }
    }

    :where(.article) > :is(h1, h2, h3, h4, h5, h6):not(:last-child) {
        @include intrinsics.margin-bottom($namespace: "heading.article", $unit: em);
    }

    :where(.article) > :not(h1, h2, h3, h4, h5, h6) + :is(h1, h2, h3, h4, h5, h6) {
        @include intrinsics.margin-top($namespace: "heading.article", $unit: em);
    }
}
