@use "../mixins/alignments";
@use "../mixins/borders";
@use "../mixins/colors";
@use "../mixins/fonts";
@use "../mixins/intrinsics";
@use "../mixins/palettes";
@use "../mixins/radius";
@use "../mixins/sizings";
@use "../mixins/transforms";
@use "../mixins/transitions";

@mixin base($namespace) {
    appearance: none;

    position: relative;

    @include intrinsics.padding-all($namespace: $namespace, $unit: em);

    outline: none !important; // TODO: Remove during accessibility pass

    background: transparent;

    @include radius.all($unit: "rem");
    @include borders.style-all($namespace: $namespace);
    @include borders.width-all($namespace: $namespace);

    @include fonts.size($unit: rem, $sizing-tier: "inline");

    @include alignments.text();
    @include transforms.text();

    vertical-align: middle;

    @include borders.transitions();
    @include colors.transitions-background();
    @include colors.transitions-opacity();
    @include fonts.transitions();

    @include transitions.build();
}

@mixin base-disabled($namespace) {
    cursor: not-allowed;
    @include colors.opacity($namespace: "#{$namespace}.disabled");
}

@mixin state-active($is-inverse: false) {
    @if $is-inverse {
        &:not(:active, :focus) {
            @content;
        }
    } @else {
        &:is(:active, :focus) {
            @content;
        }
    }
}

@mixin state-disabled($is-inverse: false) {
    @if $is-inverse {
        &:enabled {
            @content;
        }
    } @else {
        &:disabled {
            @content;
        }
    }
}

@mixin state-hover($is-inverse: false) {
    @if $is-inverse {
        &:not(:hover) {
            @content;
        }
    } @else {
        &:hover {
            @content;
        }
    }
}

@mixin state-flush-active($is-inverse: false) {
    @if $is-inverse {
        &:not(:active, :hover, :focus) {
            @content;
        }
    } @else {
        &:is(:active, :hover, :focus) {
            @content;
        }
    }
}

@mixin pseudo-placeholder-base($namespace) {
    color: currentColor;
    @include colors.opacity($namespace: "#{$namespace}.placeholder");
}

@mixin variation-block-base($namespace) {
    @include borders.color-all($namespace: $namespace, $face: "background", $shade: "bolder");
    @include colors.background($namespace: $namespace, $face: "background", $shade: "bolder");
}

@mixin variation-block-hover($namespace) {
    @include borders.color-all(
        $namespace: "#{$namespace}.hover",
        $face: "background",
        $shade: "bolder"
    );

    @include colors.background(
        $namespace: "#{$namespace}.hover",
        $face: "background",
        $shade: "bolder"
    );
}

@mixin variation-block-active($namespace) {
    @include borders.color-all(
        $namespace: "#{$namespace}.active",
        $face: "background",
        $shade: "bolder"
    );

    @include colors.background(
        $namespace: "#{$namespace}.active",
        $face: "background",
        $shade: "bolder"
    );
}

@mixin variation-flush-base() {
    padding: 0;

    border: none;
    border-radius: none;

    font-size: inherit;
    line-height: inherit;

    text-align: inherit;
    text-transform: inherit;

    vertical-align: top;
}

@mixin variation-flush-active() {
    text-decoration: underline;
}

@mixin variation-flush-palette($namespace) {
    @include fonts.color($namespace: $namespace, $face: "background", $shade: "boldest");
}

@mixin variation-outline-base($namespace) {
    @include borders.color-all($namespace: $namespace, $face: "background", $shade: "bolder");
}

@mixin variation-outline-hover($namespace) {
    @include borders.color-all(
        $namespace: "#{$namespace}.hover",
        $face: "background",
        $shade: "bolder"
    );
}

@mixin variation-outline-active($namespace) {
    @include borders.color-all(
        $namespace: "#{$namespace}.active",
        $face: "background",
        $shade: "bolder"
    );
}
