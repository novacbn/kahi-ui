var stork=function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){"use strict";var r,s=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t){var n=e.call(this,t)||this;return n.name="StorkError",n}return s(t,e),t}(Error);t.default=i},function(e,t,n){"use strict";function r(e){const t=n.p;let r="";return(!t||t.indexOf("://")<0)&&(r+=window.location.protocol+"//"+window.location.host),r+=t||"/",r+e}let s;n.r(t),n.d(t,"wasm_register_index",(function(){return _})),n.d(t,"wasm_search",(function(){return w})),n.d(t,"wasm_stork_version",(function(){return b}));const i=new Array(32).fill(void 0);function o(e){return i[e]}i.push(void 0,null,!0,!1);let a=i.length;function l(e){const t=o(e);return function(e){e<36||(i[e]=a,a=e)}(e),t}let u=0,c=null;function d(){return null!==c&&c.buffer===s.memory.buffer||(c=new Uint8Array(s.memory.buffer)),c}let h=new TextEncoder("utf-8");const f="function"==typeof h.encodeInto?function(e,t){return h.encodeInto(e,t)}:function(e,t){const n=h.encode(e);return t.set(n),{read:e.length,written:n.length}};function g(e,t,n){if(void 0===n){const n=h.encode(e),r=t(n.length);return d().subarray(r,r+n.length).set(n),u=n.length,r}let r=e.length,s=t(r);const i=d();let o=0;for(;o<r;o++){const t=e.charCodeAt(o);if(t>127)break;i[s+o]=t}if(o!==r){0!==o&&(e=e.slice(o)),s=n(s,r,r=o+3*e.length);const t=d().subarray(s+o,s+r);o+=f(e,t).written}return u=o,s}let p=null;function m(){return null!==p&&p.buffer===s.memory.buffer||(p=new Int32Array(s.memory.buffer)),p}let y=new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0});function v(e,t){return y.decode(d().subarray(e,e+t))}function _(e,t){try{const c=s.__wbindgen_add_to_stack_pointer(-16);var n=g(e,s.__wbindgen_malloc,s.__wbindgen_realloc),r=u,i=function(e,t){const n=t(1*e.length);return d().set(e,n/1),u=e.length,n}(t,s.__wbindgen_malloc),o=u;s.wasm_register_index(c,n,r,i,o);var a=m()[c/4+0],l=m()[c/4+1];return v(a,l)}finally{s.__wbindgen_add_to_stack_pointer(16),s.__wbindgen_free(a,l)}}function w(e,t){try{const c=s.__wbindgen_add_to_stack_pointer(-16);var n=g(e,s.__wbindgen_malloc,s.__wbindgen_realloc),r=u,i=g(t,s.__wbindgen_malloc,s.__wbindgen_realloc),o=u;s.wasm_search(c,n,r,i,o);var a=m()[c/4+0],l=m()[c/4+1];return v(a,l)}finally{s.__wbindgen_add_to_stack_pointer(16),s.__wbindgen_free(a,l)}}function b(){try{const n=s.__wbindgen_add_to_stack_pointer(-16);s.wasm_stork_version(n);var e=m()[n/4+0],t=m()[n/4+1];return v(e,t)}finally{s.__wbindgen_add_to_stack_pointer(16),s.__wbindgen_free(e,t)}}y.decode(),t.default=async function e(t){void 0===t&&(t=r("node_modules/stork-search/stork.js").replace(/\.js$/,"_bg.wasm"));const n={wbg:{}};n.wbg.__wbg_new_59cb74e423758ede=function(){return function(e){a===i.length&&i.push(i.length+1);const t=a;return a=i[t],i[t]=e,t}(new Error)},n.wbg.__wbg_stack_558ba5917b466edd=function(e,t){var n=g(o(t).stack,s.__wbindgen_malloc,s.__wbindgen_realloc),r=u;m()[e/4+1]=r,m()[e/4+0]=n},n.wbg.__wbg_error_4bb6c2a97407129a=function(e,t){try{console.error(v(e,t))}finally{s.__wbindgen_free(e,t)}},n.wbg.__wbindgen_object_drop_ref=function(e){l(e)},("string"==typeof t||"function"==typeof Request&&t instanceof Request||"function"==typeof URL&&t instanceof URL)&&(t=fetch(t));const{instance:c,module:d}=await async function(e,t){if("function"==typeof Response&&e instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(e,t)}catch(t){if("application/wasm"==e.headers.get("Content-Type"))throw t;console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",t)}const n=await e.arrayBuffer();return await WebAssembly.instantiate(n,t)}{const n=await WebAssembly.instantiate(e,t);return n instanceof WebAssembly.Instance?{instance:n,module:e}:n}}(await t,n);return s=c.exports,e.__wbindgen_wasm_module=d,s}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),s=n(0);t.resolveSearch=function(e,t){var n=null,i=null;try{n=r.wasm_search(e,t),i=JSON.parse(n)}catch(e){throw new s.default("Could not parse data from wasm_search. If you see this, please file a bug: https://jil.im/storkbug "+n)}if(!i)throw new s.default("Data was an empty object");if(i.error)throw new s.default("Could not perform search: the WASM binary failed to return search results.\n    You might not be serving your search index properly.\n    If you think this is an error, please file a bug: https://jil.im/storkbug\n    \n    The WASM binary came back with:\n    "+i.error);return i}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),s=n(13),i=n(14),o=n(2),a=n(0),l=n(15),u=n(1),c=null,d=new s.default,h=new r.EntityManager(d);function f(e){return void 0===e&&(e=null),i.loadWasm(e).then((function(e){d.flush(),c=e})).catch((function(e){throw new a.default(e)}))}function g(e,t,n){return void 0===n&&(n={}),new Promise((function(r,s){var i=l.validateIndexParams(e,t);i?s(i):h.register(e,t,n).then(r).catch(s)}))}function p(e){try{h.attachToDom(e)}catch(e){throw new a.default(e.message)}}t.initialize=f,t.downloadIndex=g,t.attach=p,t.register=function(e,t,n){var r=f(),s=g(e,t,n);return p(e),Promise.all([r,s]).then()},t.search=function(e,t){var n;if(!e||!t)throw new a.default("Make sure to call stork.search() with two arguments: the index name and the search query.");if("ready"!=(null===(n=h.entities[e])||void 0===n?void 0:n.state))throw new a.default("Couldn't find index. Make sure the stork.downloadIndex() promise has resolved before calling stork.search().");return o.resolveSearch(e,t)},t.debug=function(){return{wasmQueueMethods:d.queue.length,loadedWasmUrl:c,indexes:h.entities,indexCount:Object.keys(h.entities).length,jsStorkVersion:"1.2.1",wasmStorkVersion:u.wasm_stork_version()}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),s=n(10),i=n(12),o=n(0),a=function(){function e(e){this.entities={},this.wasmQueue=e}return e.prototype.register=function(e,t,n){var a=this;return new Promise((function(l,u){var c=s.calculateOverriddenConfig(n);if(c instanceof o.default)u(c);else{if(a.entities[e]&&!c.forceOverwrite)throw new o.default("You're registering an index named `"+e+"`, but that already exists. If this is expected, set forceOverwrite to true in your Javascript config to allow overwriting indexes.");var d=new r.Entity(e,t,c);a.entities[e]=d,i.loadIndexFromUrl(t,{progress:function(e){d.setDownloadProgress(e)},load:function(e){a.wasmQueue.runAfterWasmLoaded((function(){d.registerIndex(new Uint8Array(e)).then(l).catch(u)}))},error:function(){d.setDownloadError(),u()}})}}))},e.prototype.attachToDom=function(e){if(!this.entities[e])throw new Error("Index "+e+" has not been registered!");this.entities[e].attachToDom()},e}();t.EntityManager=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),s=n(6),i=n(1),o=n(0),a=function(){function e(e,t,n){var r=this;this._state="initialized",this.downloadProgress=0,this.results=[],this.totalResultCount=0,this.eventListenerFunctions={},this.highlightedResult=0,this.resultsVisible=!1,this.hoverSelectEnabled=!0,this.setDownloadProgress=function(e){r.state="loading",r.downloadProgress=e,r.config.showProgress&&r.render()},this.name=e,this.url=t,this.config=n}return Object.defineProperty(e.prototype,"state",{get:function(){return this._state},set:function(e){this._state=e,this.render()},enumerable:!0,configurable:!0}),e.prototype.getCurrentMessage=function(){if(!this.domManager)return null;var e=this.domManager.getQuery();return"error"===this.state?"Error! Check the browser console.":"ready"!=this.state?"Loading...":(null==e?void 0:e.length)<this.config.minimumQueryLength?"Filtering...":this.results?0===this.totalResultCount?"No files found.":1===this.totalResultCount?"1 file found.":this.totalResultCount+" files found.":null},e.prototype.generateRenderConfig=function(){return{results:this.results,resultsVisible:!0,showScores:this.config.showScores,message:this.getCurrentMessage(),showProgress:this.config.showProgress,progress:this.downloadProgress,state:this.state}},e.prototype.render=function(){this.domManager&&this.domManager.render(this.generateRenderConfig())},e.prototype.registerIndex=function(e){var t=this;return new Promise((function(n,r){var s=JSON.parse(i.wasm_register_index(t.name,e));s.error?r(new o.default(s.error)):(t.config.printIndexInfo&&console.log(s),t.state="ready",n(s))}))},e.prototype.attachToDom=function(){this.domManager=new s.EntityDom(this.name,this),this.render()},e.prototype.injestSearchData=function(e){this.results=e.results,this.totalResultCount=e.total_hit_count,this.highlightedResult=0;var t=e.url_prefix||"";this.results.map((function(e){var n="";e.excerpts&&e.excerpts[0]&&e.excerpts[0].internal_annotations&&e.excerpts[0].internal_annotations[0]&&e.excerpts[0].internal_annotations[0].a&&"string"==typeof e.excerpts[0].internal_annotations[0].a&&(n=e.excerpts[0].internal_annotations[0].a),e.entry.url=""+t+e.entry.url+n})),this.render()},e.prototype.getSanitizedResults=function(){var e=this.results;return e.map((function(e){delete e.title_highlight_ranges,e.excerpts.map((function(e){delete e.highlight_ranges,delete e.internal_annotations}))})),e},e.prototype.setDownloadError=function(){this.state="error"},e.prototype.performSearch=function(e){if("ready"===this.state){if(e.length<this.config.minimumQueryLength)return this.results=[],void this.render();try{var t=r.resolveSearch(this.name,e);if(!t)return;this.injestSearchData(t),this.config.onQueryUpdate&&this.config.onQueryUpdate(e,this.getSanitizedResults())}catch(e){console.error(e)}}else this.render()},e}();t.Entity=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(7),s=n(8),i={results:[],resultsVisible:!1,showScores:!1,message:null,showProgress:!1,progress:1,state:"ready"},o=function(){function e(e,t){var n,s,o=this;this.scrollAnchorPoint="end",this.entity=t;var a=[{selector:'input[data-stork="'+e+'"]',elementName:"input"},{selector:'div[data-stork="'+e+'-output"]',elementName:"output"}].map((function(t){var n=document.querySelector(t.selector);if(!n)throw new Error('Could not register search box "'+e+'": '+t.elementName+" element not found. Make sure an element matches the query selector `"+t.selector+"`");return n})),l=a[0],u=a[1];this.elements={input:l,output:u,list:r.create("ul",{classNames:["stork-results"]}),attribution:r.create("div",{classNames:["stork-attribution"]}),progress:r.create("div",{classNames:["stork-progress"]}),message:r.create("div",{classNames:["stork-message"]}),closeButton:r.create("button",{classNames:["stork-close-button"]})},this.elements.input.removeEventListener("input",this.entity.eventListenerFunctions.inputInputEvent),this.elements.input.removeEventListener("keydown",this.entity.eventListenerFunctions.inputKeydownEvent),this.entity.eventListenerFunctions={inputInputEvent:function(e){o.handleInputEvent(e)},inputKeydownEvent:function(e){o.handleKeyDownEvent(e)}},this.elements.input.addEventListener("input",this.entity.eventListenerFunctions.inputInputEvent),this.elements.input.addEventListener("keydown",this.entity.eventListenerFunctions.inputKeydownEvent),null===(n=this.elements.list)||void 0===n||n.addEventListener("mousemove",(function(){o.hoverSelectEnabled=!0})),this.elements.attribution.innerHTML='Powered by <a href="https://stork-search.net">Stork</a>',r.setText(this.elements.closeButton,"×"),this.entity.config.showProgress&&r.add(this.elements.progress,"afterend",this.elements.input),null===(s=this.elements.closeButton)||void 0===s||s.addEventListener("click",(function(){o.elements.input.value="",o.elements.input.focus(),o.render(i);var e=[o.entity.config.onInputCleared,o.entity.config.onResultsHidden],t=e[0],n=e[1];t&&t(),n&&n()}))}return e.prototype.clearDom=function(){var e;r.clear(this.elements.output),r.clear(this.elements.list),null===(e=this.elements.closeButton)||void 0===e||e.remove(),this.elements.output.classList.remove("stork-output-visible")},e.prototype.render=function(e){var t,n=this,i=this.elements.input.value;if(this.clearDom(),this.lastRenderState=e,e.showProgress){var o=function(){switch(e.state){case"ready":case"error":return 1;case"initialized":case"loading":return.9*e.progress+.05}}();o<1?(this.elements.progress.style.width=100*o+"%",this.elements.progress.style.opacity="1"):(this.elements.progress.style.width="100%",this.elements.progress.style.opacity="0")}if("error"===e.state&&this.elements.input.classList.add("stork-error"),this.getQuery().length>0&&e.resultsVisible&&(this.elements.output.classList.add("stork-output-visible"),r.add(this.elements.message,"beforeend",this.elements.output)),e.message&&r.setText(this.elements.message,e.message),(null===(t=e.results)||void 0===t?void 0:t.length)>0&&e.resultsVisible){r.add(this.elements.list,"beforeend",this.elements.output);for(var a=function(t){var i=e.results[t],o={selected:t===l.highlightedResult,showScores:e.showScores},a=s.resultToListItem(i,o);r.add(a,"beforeend",l.elements.list),a.addEventListener("mousemove",(function(){n.hoverSelectEnabled&&t!==n.highlightedResult&&n.changeHighlightedResult({to:t,shouldScrollTo:!1})})),a.addEventListener("click",(function(e){e.preventDefault(),n.selectResult()}))},l=this,u=0;u<e.results.length;u++)a(u);r.add(this.elements.attribution,"beforeend",this.elements.output)}((null==i?void 0:i.length)||0)>0&&this.entity.config.showCloseButton&&r.add(this.elements.closeButton,"afterend",this.elements.input)},e.prototype.selectResult=function(){if(null!=this.highlightedResult){var e=this.entity.results[this.highlightedResult];this.entity.config.onResultSelected?Promise.resolve(this.entity.config.onResultSelected(this.getQuery(),e)).finally((function(){window.location.assign(e.entry.url)})):window.location.assign(e.entry.url)}},e.prototype.changeHighlightedResult=function(e){var t,n=this.highlightedResult,s=Math.max(0,Math.min(this.entity.results.length-1,e.to));this.highlightedResult=s,this.scrollAnchorPoint=(n||0)<s?"end":"start";for(var i=null,o=0;o<this.entity.results.length;o++){var a=null===(t=this.elements.list)||void 0===t?void 0:t.children[o];if(a){o==s?(a.classList.add("selected"),i=a):a.classList.remove("selected")}}return e.shouldScrollTo&&(this.hoverSelectEnabled=!1,i&&r.existsBeyondContainerBounds(i,this.elements.list)&&i.scrollIntoView({behavior:"smooth",block:this.scrollAnchorPoint,inline:"nearest"})),s},e.prototype.handleKeyDownEvent=function(e){switch(e.keyCode){case 40:if(null==this.highlightedResult)this.changeHighlightedResult({to:0,shouldScrollTo:!0});else{var t=Math.min(this.highlightedResult+1,this.entity.results.length-1);this.changeHighlightedResult({to:t,shouldScrollTo:!0})}break;case 38:if(null!=this.highlightedResult){t=Math.max(0,this.highlightedResult-1);this.changeHighlightedResult({to:t,shouldScrollTo:!0})}break;case 13:this.selectResult();break;case 27:if(this.lastRenderState.resultsVisible)this.render(i),(n=this.entity.config.onResultsHidden)&&n();else if(this.elements.input.value.length>0){var n;this.elements.input.value="",this.render(i),(n=this.entity.config.onInputCleared)&&n()}break;default:return}},e.prototype.handleInputEvent=function(e){this.entity.performSearch(e.target.value)},e.prototype.getQuery=function(){return this.elements.input.value},e}();t.EntityDom=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.create=function(e,t){var n=document.createElement(e);return t.classNames&&n.setAttribute("class",t.classNames.join(" ")),n},t.add=function(e,t,n){n.insertAdjacentElement(t,e)},t.clear=function(e){for(;e&&e.firstChild;)e.removeChild(e.firstChild)},t.setText=function(e,t){var n=document.createTextNode(t);e&&e.firstChild?e.replaceChild(n,e.firstChild):e&&e.appendChild(n)},t.existsBeyondContainerBounds=function(e,t){var n=e.getBoundingClientRect(),r=t.getBoundingClientRect();return n.bottom>r.bottom||n.top<r.top}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9);t.resultToListItem=function(e,t){var n=document.createElement("template");return n.innerHTML='\n<li class="stork-result'+(t.selected?" selected":"")+'">\n  <a href="'+e.entry.url+'">\n    <div style="display: flex; justify-content: space-between">\n      <p class="stork-title">'+r.highlight(e.entry.title,e.title_highlight_ranges||[])+"</p>\n      "+(t.showScores?"<code><b>"+e.score+"</b></code>":"")+"\n    </div>\n      "+e.excerpts.map((function(e){return'<div style="display: flex; justify-content: space-between"><p class="stork-excerpt">\n        ...'+r.highlight(e.text,e.highlight_ranges||[])+"...\n        </p>\n        "+(t.showScores?"<code>"+e.score+"</code>":"")+"\n        </div>"})).join("")+"\n  </a>\n</li>",n.content.firstElementChild}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.highlight=function(e,t){function n(e,t,n){return e.substr(0,t)+n+e.substr(t)}for(var r=0,s=0,i=t;s<i.length;s++){var o=i[s];e=n(e,o.beginning+r,'<mark class="stork-highlight">'),r+='<mark class="stork-highlight">'.length,e=n(e,o.end+r,"</mark>"),r+="</mark>".length}return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(11);t.defaultConfig={showProgress:!0,printIndexInfo:!1,showScores:!1,showCloseButton:!0,minimumQueryLength:3,forceOverwrite:!1,onQueryUpdate:void 0,onResultSelected:void 0,onResultsHidden:void 0,onInputCleared:void 0},t.calculateOverriddenConfig=function(e){var n=s.difference(Object.keys(e),Object.keys(t.defaultConfig));if(n.length>0){var i=s.plural(n.length,"key","keys"),o=JSON.stringify(n);return new r.default("Invalid "+i+" in config object: "+o)}for(var a=Object.assign({},t.defaultConfig),l=0,u=Object.keys(t.defaultConfig);l<u.length;l++){var c=u[l],d=e[c];void 0!==d&&(a[c]=d)}return a}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.htmlToElement=function(e){var t=document.createElement("template");return e=e.trim(),t.innerHTML=e,t.content.firstChild},t.difference=function(e,t){var n=new Set(e),r=new Set(t),s=new Set(Array.from(n).filter((function(e){return!r.has(e)})));return Array.from(s)},t.plural=function(e,t,n){return 1==e?t:n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadIndexFromUrl=function(e,t){var n=new XMLHttpRequest;n.addEventListener("load",(function(e){var n=e.target,r=n.status,s=n.response;0!==r?r<200||r>299?t.error():t.load(s):t.progress(e.loaded/e.total)})),n.addEventListener("error",(function(){t.error()})),n.addEventListener("progress",(function(e){t.progress(e.loaded/e.total)})),n.responseType="arraybuffer",n.open("GET",e),n.send()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.queue=[],this.flushes=0}return e.prototype.runAfterWasmLoaded=function(e){return this.flushes>0?e():this.queue.push(e),this},e.prototype.flush=function(){this.flushes++;for(var e=0,t=this.queue;e<t.length;e++){(0,t[e])()}this.queue=[]},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);t.loadWasm=function(e){var t=e||"https://files.stork-search.net/stork.wasm";return r.default(t).then((function(){return t}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.validateIndexParams=function(e,t){return"string"!=typeof e?new r.default("Index registration name must be a string."):"string"!=typeof t?new r.default("URL must be a string."):null}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,